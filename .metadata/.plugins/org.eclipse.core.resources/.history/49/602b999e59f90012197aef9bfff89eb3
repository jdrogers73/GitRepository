package edu.rogers.thekillersbattleborntour;

import twitter4j.Query;
import twitter4j.QueryResult;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;



/*
 * This set of three classes will be used to receive the JSON string from Twitter's web server 
 * (which will be in byte form) and convert the string to character form
 */

import java.io.BufferedReader; 
/*
 * Provides a buffer to a reader;readers can read from files or streams. The data structure of a buffer 
 * is an array. When data is typically read from disk which must deal with 
 * the data in blocks. One or more blocks are copied into an array that has a capacity that is some 
 * multiple of the block size.Then, data from the buffer can be handled as individual bytes rather than 
 * entire blocks. Default buffer size is 8,192, but can be adjusted at instantiation
 */
import java.io.InputStream; 
/*
 * receives streams of data in byte form. source can be a file, a server, or a byte array. Byte arrays are 
 * generally used for low-level I/O, such as read/write buffers for files and networks, as graphics image 
 * buffers, and as "untyped" data streams.
 */
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
//purpose of input stream reader is to convert bytes to characters.

/*
 * The following bundle of classes are needed to communicate with Twitter's web server and process
 * its response.
 */
import org.apache.http.HttpEntity;
/*
 * An entity is a data object that can be processed by a content resolver and will contain the
 * JSON string.
 */
import org.apache.http.HttpResponse;
/*
 * This app will receive a response object from the server. The response will contain a status line
 * which contains a status code which indicates the outcome of the server's efforts to process the command.
 * The response also contains the entity.
 */
import org.apache.http.StatusLine;
/*
 * The status line is generated by the server and will include a status code for success/failure as well
 * as an entity.
 */
import org.apache.http.client.HttpClient;
/*
 * Interface for several subclasses of HTTP client classes; this app uses the the subclass
 * DefaultHttpClient.
 */
import org.apache.http.client.methods.HttpGet;
/*
 * This class contains various requests the client can make to the server. Will use a GET request
 * to get the 20 most recent posts to the Killers official feed
 */
import org.apache.http.impl.client.DefaultHttpClient;
/*
 * actually creates the HTTPClient
 */


//The following three classes are used in all Android apps
import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

public class TwitterActivity extends Activity
{
	Button mButtonTweets;
	String JSONString;
	TextView JSONContent;
	
	
	
	class GetTwitterTimeline extends AsyncTask<Void, Void, String>
	{
		@Override
		protected String doInBackground(Void... params) 
		{
			Log.d("Twitter4j", "Beginning Request for timeline");
			
			try
			{
				Log.d("Twitter4j", "Creating twitter object");
				Twitter twitter = new TwitterFactory().getInstance();
				
				try
				{
					Log.d("Twitter4j", "Getting authorization token");
					
					
					twitter.setOAuthConsumer("5UjTpE4rVVZ2idZgxFFEGA", "uh6ZlPxIVvU5JIPCEuhUQzoUVnQFvxQ2t37gOTYHB4");
					
					Log.d("Twitter4j", "Save token in requestToken");
					
					RequestToken requestToken = twitter.getOAuthRequestToken();
					AccessToken accessToken = null;
					
					Log.d("Twitter4j", "Getting Authorization Token");
					while (accessToken == null)
					{
						Log.d("Twitter4j", requestToken.getAuthenticationURL());
						try
						{
							accessToken = twitter.getOAuthAccessToken(requestToken);
						}//try
						catch(TwitterException te)
						{
							if (te.getStatusCode() == 401)
							{
							Log.d("Twitter4j", "Unable to get the access token");
							}//if
							else
							{
								te.printStackTrace();
							}//else
						}//catch
					}//while
					Log.d("Twitter4j", "Got Access Token");
					Log.d("Twitter4j", "Access Token: " + accessToken.getToken());
					Log.d("Twitter4j", "Access Token Secret: " + accessToken.getTokenSecret());
				}//try
				catch (IllegalStateException ie)
				{
					if(!twitter.getAuthorization().isEnabled())
					{
						Log.e("Twitter4j", "OAuth consumer key/secret is not set.");
					}//if
				}//catch
			}//try
			catch (TwitterException te)
			{
				te.printStackTrace();
				Log.d("Twitter4j", "Failed to get timeline");
			}//catch
			
			String JSONString = "JSON content will go here";
			
			return JSONString;
		}
	}//end method getTwitterPosts()
	

		
    @Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.layout_twitter);
		
		JSONContent = (TextView) findViewById(R.id.textview_tweets);
		
		mButtonTweets = (Button) findViewById(R.id.button_tweets);
		mButtonTweets.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				TwitterActivity tweets = new TwitterActivity();
				TwitterActivity.GetTwitterTimeline timeline = new GetTwitterTimeline();
				JSONString = timeline.doInBackground();
				
				JSONContent.setText(JSONString);
			}
		});
		
	}
}